# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

---
name: Build Container
description: Given the inputs found below, build all containers found in a docker-compose.yaml file for a given configuration
inputs:
  work_dir:
    description: Directory to run the build in
    required: true
    type: string
  docker_compose_path:
    description: Path with xxx-compose.yaml to build
    required: true
    type: string
  service_list:
    description: List of services to build
    required: false
    default: ""
    type: string
  registry:
    description: Container Registry URL
    required: false
    default: "opea"
    type: string
  tag:
    description: Container Tag
    required: false
    default: "latest"
    type: string

runs:
  using: "composite"
  steps:
    - name: Build Containers
      shell: bash
      run: |
        cd $(echo "${{ inputs.work_dir }}" | cut -d'/' -f1-7)
        COMMIT_SHA=$(git rev-parse --short HEAD)
        COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        service_list=$(echo ${{ inputs.service_list }} | tr ',' ' ')
        echo $service_list
        cp ${{ inputs.docker_compose_path }} ${{ inputs.work_dir }}/docker-compose.yaml
        sed -i '/dockerfile: /a\'"      args:\n        COMMIT_SHA: \${COMMIT_SHA}\n        COMMIT_MESSAGE: \${COMMIT_MESSAGE}" ${{ inputs.work_dir }}/docker-compose.yaml
        cat ${{ inputs.work_dir }}/docker-compose.yaml
        paths=($(grep -oP 'dockerfile:\s*\K.*' ${{ inputs.work_dir }}/docker-compose.yaml))
        for path in "${paths[@]}"; do
          echo "Found dockerfile: $dockerfile"
          sed -i '/FROM /a\'"\nARG COMMIT_SHA\nARG COMMIT_MESSAGE\nLABEL commit.sha=\$COMMIT_SHA\nLABEL commit.message=\$COMMIT_MESSAGE" ${{ inputs.work_dir }}/$path
        done
        REGISTRY=${{ inputs.registry }} \
        TAG=${{ inputs.tag }} \
        docker compose build ${service_list} --no-cache --build-arg COMMIT_SHA=$COMMIT_SHA --build-arg COMMIT_MESSAGE="$COMMIT_MESSAGE"
        docker inspect ${REGISTRY:-opea}/${service_list}
      working-directory: ${{ inputs.work_dir }}
    - name: Push Containers
      shell: bash
      run: |
        service_list=$(echo ${{ inputs.service_list }} | tr ',' ' ')
        REGISTRY=${{ inputs.registry }} \
        TAG=${{ inputs.tag }} \
        docker compose push ${service_list}
      working-directory: ${{ inputs.work_dir }}
    - name: Clean up Containers
      if: ${{ always() }}
      shell: bash
      run: |
        REGISTRY=${{ inputs.registry }} \
        TAG=${{ inputs.tag }} \
        docker compose down --rmi all
      working-directory: ${{ inputs.work_dir }}
    - name: Remove Containers
      if: ${{ always() }}
      shell: bash
      run: docker system prune --force
