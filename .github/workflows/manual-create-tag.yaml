# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: Create and Push Tag to Multiple Repos

on:
  workflow_dispatch: # Allows manual trigger of the workflow
    inputs:
      branch:
        default: 'v1.1rc'
        description: 'Branch to tag'
        required: true
        type: string
      tag_name: # Input for the tag name
        default: v1.1
        description: 'Tag name'
        required: true
        type: string
      repo_list:
        default: 'GenAIExamples,GenAIEval,GenAIComps,GenAIInfra,GenAIStudio,docs'
        description: 'List of repos to build the binary'
        required: true
        type: string

jobs:
  get-test-matrix:
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.get-matrix.outputs.repos }}
    steps:
      - name: Create Matrix
        id: get-matrix
        run: |
          repos=($(echo ${{ inputs.repo_list }} | tr ',' ' '))
          repos_json=$(printf '%s\n' "${repos[@]}" | sort -u | jq -R '.' | jq -sc '.')
          echo "repos=$repos_json" >> $GITHUB_OUTPUT

  create-and-push-tag:
    needs: get-test-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository: ${{ fromJson(needs.get-test-matrix.outputs.repos) }}
      fail-fast: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          repository: opea-project/${{ matrix.repository }}
          token: ${{ secrets.ACTION_TOKEN }} # Access token for the repo
          ref: ${{ inputs.branch }}
          path: ${{ matrix.repository }}

      - name: Create and Push Tag
        env:
          TAG_NAME: ${{ github.event.inputs.tag_name }}
          TAG_MESSAGE: "Tag created by OPEA CICD"
        working-directory: ./${{ matrix.repository }}
        run: |
          git config user.name "CICD-at-OPEA"
          git config user.email "CICD@opea.dev"
          git tag -a $TAG_NAME -m "$TAG_MESSAGE"
          git push origin $TAG_NAME

  print-tag-url:
    needs: create-and-push-tag
    runs-on: ubuntu-latest
    steps:
      - name: Print Tag URL
        run: |
          repos=($(echo ${{ inputs.repo_list }} | tr ',' ' '))
          for repo in "${repos[@]}"; do
              url="https://github.com/opea-project/$repo/releases/tag/${{ github.event.inputs.tag_name }}"
              response=$(curl -L -s -o /dev/null -w "%{http_code}" "$url")|| true
              if [ "$response" -ne 200 ]; then
                echo "**********Validation failed, try again**********"
                response_retry=$(curl -s -o /dev/null -w "%{http_code}" "$url")
                if [ "$response_retry" -eq 200 ]; then
                  echo "$url"
                else
                  echo "Invalid tag $url"
                  status="FAILED"
                fi
              else
                echo "$url"
              fi
          done
          
          if [ "$status" == "FAILED" ]; then
              exit 1
          fi